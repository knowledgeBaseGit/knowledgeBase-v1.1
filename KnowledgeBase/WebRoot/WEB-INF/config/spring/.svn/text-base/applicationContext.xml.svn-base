<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	<bean id="aa" class="com.loongsoft.knowledgebase.basis.Applicationhandler">
	</bean>

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>WEB-INF/config/properties/jdbc.properties</value>
			</list>
		</property>
	</bean>


	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName">
			<value>${jdbc.driverClassName}</value>
		</property>

		<property name="url">
			<value>${jdbc.url}</value>
		</property>
		<property name="username">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
	</bean>


	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">

		<property name="dataSource">
			<ref local="dataSource" />
		</property>

		<!-- <property name="mappingResources"> <value></value> </property> -->

		<property name="hibernateProperties">
			<props>

				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>

				<!-- 释放jdbc resources 方式 如果不配置默认是auto (当然现在没有auto了，等同于"after_statement" 
					or "after_transaction")， 注意3.0以及之前默认是ON_CLOSE(也就是session关闭才释放jdbc链接) -->
				<prop key="hibernate.connection.release_mode">
					${hibernate.connection.release_mode}
				</prop>
				<prop key="hibernate.format_sql">
					${hibernate.format_sql}
				</prop>
		 
			</props>
		</property>

		<!-- 引入hibernate 映射文件 -->
		<property name="configLocations">
			<list>
				<value>WEB-INF/config/hibernate/hibernate-bean.cfg.xml</value>
				<value>WEB-INF/config/hibernate/hibernate-base.cfg.xml</value>

			</list>
		</property>
	</bean>

	<!-- spring 事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>

	<bean id="hibernateTemplete" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>


	<!-- 定义事务拦截器 -->

	<bean id="transactionInterceptor"

		class="org.springframework.transaction.interceptor.TransactionInterceptor">

		<!-- 为事务拦截器注入一个事务管理器 -->

		<property name="transactionManager" ref="transactionManager" />

		<property name="transactionAttributes">

			<!-- 定义事务传播属性 PROPAGATION_REQUIRED：表示如果事务不存在，则创建一个新事务，如果存在，则加入到该事务。 -->

			<props>

				<!-- <prop key="save*">PROPAGATION_REQUIRED</prop>

				<prop key="add*">PROPAGATION_REQUIRED</prop>

				<prop key="delete*">PROPAGATION_REQUIRED</prop>

				<prop key="update*">PROPAGATION_REQUIRED</prop> -->
				
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="list*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
                <prop key="*">PROPAGATION_REQUIRED</prop>

				<!-- <prop key="lock*">PROPAGATION_REQUIRED</prop>
				<prop key="unLock*">PROPAGATION_REQUIRED</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="list*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop> -->
				

			</props>

		</property>

	</bean>

	<!-- 定义拦截器要拦截的bean -->

	<bean id="autoProxy"

		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">

		<property name="beanNames">

			<list>

				<!-- 拦截所有名字以Service结尾的bean进行代理 -->

				<value>*ServiceImpl</value>
				<value>*Service</value>

			</list>

		</property>

		<property name="interceptorNames">

			<list>

				<value>transactionInterceptor</value>

			</list>

		</property>

	</bean>




	<bean id="baseDao" class="com.loongsoft.knowledgebase.basis.impl.BaseDaoImp">
		<property name="hibernateTemplate" ref="hibernateTemplete"></property>
	</bean>

	
	<!-- <bean id="keywordDaoImpl" class="com.loongsoft.knowledgebase.daoImpl.KeywordDaoImpl"> 
		<property name="hibernateTemplate" ref="hibernateTemplete"></property> </bean> -->
</beans>