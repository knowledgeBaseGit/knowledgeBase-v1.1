<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">
	<display-name>KnowleageBase</display-name>


	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/config/spring/applicationContext.xml,
			/WEB-INF/config/spring/applicationContext*.xml
		</param-value>
	</context-param>

	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/config/properties/log4j.properties</param-value>
	</context-param>


	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>



	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>


	<!-- 用户是否登录 -->
	<filter>
		<filter-name>CheckLoginFilter</filter-name>
		<filter-class>com.loongsoft.knowledgebase.filter.CheckLoginFilter</filter-class>
		<init-param>
			<param-name>checkSessionKey</param-name>
			<param-value>loginUser</param-value>
		</init-param>
		<init-param>
			<param-name>redirectURL</param-name>
			<param-value>/jsp/Login.jsp</param-value>
		</init-param>
		<init-param>
			<param-name>notCheckURLList</param-name>
			<param-value>/index_doc.jsp;/jsp/image.jsp;/jsp/Login.jsp;/jsp/Register.jsp;/register/register_checkLoginName.action;/register/register_checkCode.action;/register_login.action;/register/register_check.action;/register/register_checkLoginName.action;/register/register_regist.action;/register/register_staff.action</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CheckLoginFilter</filter-name>
		<url-pattern>*.action</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CheckLoginFilter</filter-name>
		<url-pattern>*.jsp</url-pattern>
	</filter-mapping>


	<!-- OpenSessionInViewFilter的主要功能是用来把一个 HibernateSession和一次完整的请求过程对应的线程相绑定,它将自动被Spring的事务管理器探测到。目的是为了实 
		现"Open Session in View"的模式。它允许在事务提交后延迟加载显示所需要的对象。 -->
	<!-- 使用openSessionInView 防止懒加载 -->
	<filter>
		<filter-name>openSessionInView</filter-name>
		<filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>

		<!-- 必须配置,且必须为true(开启),因为OpenSessionInViewFilter 过滤器将 Hibernate Session 
			绑定到请求线程中，它将自动被 Spring 的事务管理器探测到 -->
		<init-param>
			<param-name>singleSession</param-name>
			<param-value>true</param-value>
		</init-param>

		<!-- 必须配置,否则在service层调用dao方法时会出现在只读模式下(FlushMode.NEVER/MANUAL)写操作不被允许 的问题 -->
		<init-param>
			<param-name>flushMode</param-name>
			<param-value>AUTO</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>openSessionInView</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 编码格式 过滤 -->
	<filter>
		<filter-name>CharacterEncoding</filter-name>
		<filter-class>com.loongsoft.knowledgebase.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CharacterEncoding</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


	<!-- struts 配置文件 -->
	<filter>
		<filter-name>struts2</filter-name>
		<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
		<init-param>
			<param-name>config</param-name>
			<param-value>struts-default.xml,struts-plugin.xml,../config/struts/struts.xml</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>struts2</filter-name>
		<url-pattern>*.action</url-pattern>
	</filter-mapping>


	<filter-mapping>
		<filter-name>struts2</filter-name>
		<url-pattern>*.jsp</url-pattern>
	</filter-mapping>

	<!-- 定义Struts2的CleanUp Filter开始 --><!-- 延长action中属性的生命周期，包括自定义属性，以便在jsp页面中进行访问，让 actionContextcleanup过滤器来清除属性，不让action自己清除 -->
	<filter>
		<filter-name>struts-cleanup</filter-name>
		<filter-class>org.apache.struts2.dispatcher.ActionContextCleanUp</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>struts-cleanup</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 定义Struts2的CleanUp Filter结束 -->
	
<!-- 获取wenoffice资源文件 -->
<servlet>
  	<servlet-name>getDoc</servlet-name>
  	<servlet-class>com.loongsoft.knowledgebase.servlet.DocSender</servlet-class>
  </servlet>
  
   <servlet-mapping>
  	<servlet-name>getDoc</servlet-name>
  	<url-pattern>/getDoc</url-pattern>
  </servlet-mapping>
  
  
   <servlet>
  	<servlet-name>uploadDoc</servlet-name>
  	<servlet-class>com.loongsoft.knowledgebase.servlet.DocUpload</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>uploadDoc</servlet-name>
  	<url-pattern>/uploadDoc</url-pattern>
  </servlet-mapping>
  
  <servlet>
  	<servlet-name>getTxt</servlet-name>
  	<servlet-class>com.loongsoft.knowledgebase.servlet.TxtSender</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>getTxt</servlet-name>
  	<url-pattern>/getTxt</url-pattern>
  </servlet-mapping>
  
  <servlet>
  	<servlet-name>saveTxt</servlet-name>
  	<servlet-class>com.loongsoft.knowledgebase.servlet.TxtUpload</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>saveTxt</servlet-name>
  	<url-pattern>/saveTxt</url-pattern>
  </servlet-mapping>
  
  
  
  
  
  
  
	

    <!-- 文件上传产生的临时文件默认被 reaper thread 自动回收， 在 web app 关闭时， 这个 reaper thread 也应该关闭，下面的监听器完成的就是此项任务 -->
  <listener>
    <listener-class>
      org.apache.commons.fileupload.servlet.FileCleanerCleanup
    </listener-class>
  </listener>
     


	<welcome-file-list>
		<welcome-file>/jsp/Login.jsp</welcome-file>
	</welcome-file-list>
</web-app>